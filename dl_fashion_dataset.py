# -*- coding: utf-8 -*-
"""DL-Fashion dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aqAmAs8jYedv26LSDs59WafiCoXyu57F
"""



"""- Necessary python libraries are imported here
- Numpy is used to perform basic operatipons
- pyplot from matplotlib is used to visualize the results
- tenserflow is a deeplearning framework
- Keras is a deep learning framework
"""

# tensorflow is developed by google
# Tenssoflow is always based on tensors
# list ==== array====tensors(vector representation])
# Writing only tensorflow code is little tricky
# so we use keeas as backend of tenserflow

import tensorflow as tf
from tensorflow import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

print(tf.__version__)

# Import the dataset from keras
dir(keras.datasets)

mnist = keras.datasets.fashion_mnist

mnist

type(mnist)



"""- now we load the data into variables using load_data()
- it returns 2 tuples.The first tupel hass the training data and second tiple has test data
"""

(X_train,y_train),(X_test,y_test) = mnist.load_data()

"""- By using shape we can see that it has 60000 images for traning and each image has a shape of 28*28"""

X_train.shape , y_train.shape
# it means 60k images
# And each image shape is 28*28 = 784 pixel values

X_train[1][0]

len(X_train[0])

len(X_train[1][0])

# In image we have 784 pixels sre there
# 28*28
# RGB picture : color octure
# Gray        : Not a colour picture
# RGB values ranges between 0 to 255
# Rainbow  : 7
# 2^7 = 256
# 0 = black
# 255 = white
# Digitial image processing openCV

"""-  As we know that images are divided into 10 categories"""

y_train

"""- These are all the class names in thir proper order."""

class_names = ['top','trouser','pullover','dress','coat',
               'sandel','shirt','sneaker','bag','ankle boot']

"""- Here we have plotted the second image of our traning set
- plt.figure() function in pyplot module of maplotlib library is used to craate a a new figure
- The plt.imshow() function in pyplot module of matplotlib libary is used to display the data as image
- plt.colobar() displays the colour bar besides the image .You can see the values between 0 to 255
"""

y_train

class_names[9]

plt.figure()
plt.imshow(X_train[0])
plt.colorbar()
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_train[i])
  plt.xlabel(class_names[y_train[i]])
plt.show()

"""- Normalization
- Neural Network model doesnt take values greater than 1
"""

X_train = X_train/255.0
X_test = X_test/255.0

"""Now all the values are between 0 - 1

Steps wehave completed untill now
- we read the data
- we understand the data
- we understand the shape of the data
- we plot the data
- we undersand the labels of the data
- we normalize the data

Develop the model
"""

# Take the input layer
# Take the iden layet
# Take the output layer

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten, Dense

model = Sequential()
# imput layer starts flaten 28*28 === 1D
model.add(Flatten(input_shape = (28,28))) # 28 * 28 input

model.add(Dense(128,activation = 'relu'))

model.add(Dense(10,activation = 'softmax'))

model.summary()

model.compile(optimizer = 'adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

model.fit(X_train,
          y_train,
          epochs=10,
          batch_size=64,
          verbose = True)

"""**Model Evaluation**"""

test_loss,test_acc = model.evaluate(X_test,y_test)
print(test_acc)

y_pred = model.predict(X_test)

print(y_pred[0])

plt.figure()
plt.imshow(X_test[0])
plt.show()

np.max(y_pred[0]),np.argmax(y_pred[0])
# np.max will give max vakue in the y_pred
# np.argmax isused get the number in the list by using the index

y_pred[0]  # first prediction
max_prop = np.max(y_pred[0]) # Prediction will give probabilites of all classes
index = np.argmax(y_pred[0]) # Index of max probabilty
prediction_class = class_names[index] # using index we are getting class name
Ground_truth_class = class_names[y_test[0]]

plt.figure()
plt.imshow(X_test[0])
plt.xlabel(Ground_truth_class)
plt.ylabel(prediction_class)
plt.colorbar()

max_proba = [np.max(i) for i in y_pred]
index = [np.argmax(i) for i in y_pred]
prediction_class = [class_names[i] for i in index]
Ground_truth_class = [class_names[i] for i in y_test]

d1 = pd.DataFrame(zip(max_proba,index,prediction_class,Ground_truth_class),
             columns =['max_proba','index','prediction_class','Ground_truth_class'])
con = d1['prediction_class'] == d1['Ground_truth_class']
d1['output'] = np.where(con,1,0)

d1

con = d1['prediction_class'] == d1['Ground_truth_class']
d1['output'] = np.where(con,1,0)
accuracy = d1['output'].sum()/len(d1['output'])
accuracy



plt.figure(figsize=(10,10))
for i in range(50):
  plt.subplot(8,8,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_test[i])
  plt.xlabel(class_names[y_test[i]])
  plt.ylabel(class_names[np.argmax(y_pred[i])])
plt.show()

